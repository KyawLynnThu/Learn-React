Create React App
----------------
npx create-react-app <project-name>

Types of Component 
-------------------
- Class Based Component
- Functional Component

Functional Component
--------------------
- Only return one root component
- Can’t return two or more components
- Put all components in <div></div> to return two or more components
- Every tag needs a close tag. Example <input></input> or <input />

- To write JS code in functional component use { }

Styling
-------
- Inline
- CSS module
- 3rd Party Library

JSX => Javascript XML => JSX allows us to write HTML in React

Inline
------
- To write Inline style in JSX use style={{}}, 
- HTML Use {{ property: value }}. Unlike HTML, JSX works as Javascript Object {{ key : value }}
- Example: background-color: blue; in CSS equal to backgroundColor : "blue",

CSS Module (External CSS)
-------------------------
- Write normal CSS and import to file

Passing props to Child
----------------------
- Create two components, App.js & User.js
- In App.js, pass data like this.
    <User image={image} phone="09123123123" cell="096060606060" />
- In User.js, use function User(props) or User({image,phone,cell}) and get Data from other component using {props.image} or {image}
    <img src={image} alt="react" width="50px" height="50px" />
                            (or)
    <img src={props.image} alt="react" width="50px" height="50px" />

Passing Obejct to Child Dynamically
-----------------------------------
- Create an users array of objects in App.js, each objects contains [{ id, image, phone, cell, name }, {}, ...]
- 1st way:
    - Pass Data :
        <User image={users[0].image} phone={users[0].phone} cell={users[0].cell} name={users[0].name} />
    - Get Data :
        function User({ image, phone, cell }) {
            <img src={image} alt="react" width="50px" height="50px" />
        }
    
- 2nd way:
    - Pass Data :
        <User data={users[0]} />
    - Get Data:
        function User(props) {
            <img src={props.data.image} alt="react" width="50px" height="50px" />
        }

- 3rd way:
    - Pass Data :
        {
            users.map(usr => <User key={usr.id} data={usr} />)
        }
    - Get Data :
        function User({data}) {
            <img src={data.image} alt="react" width="50px" height="50px" />
        }

useState
-----
- import { useState } from "react";
- const [ state, setState ] = useState(initialState);

- Example :
    - In this example, the count state variable holds a number. Clicking the button increments it.
    - let [ count, setCount ] = useState(0); // [ variable, method to change variable's value ]= defaultValue
    - <button onClick={()=> { setCount(++count); }}>Change</button>

useEffect
---------
- import { useEffect } from "react";
- Call useEffect at the top level of your component to declare an Effect
- An Effect lets you keep your component synchronized with some external system
- External system means any piece of code that’s not controlled by React

  useEffect(() => {
    fetch("https://randomuser.me/api/?results=10")
    .then(res => res.json())
    .then(users => console.log(users))
    .catch(err => console.log(err))
  }, [])

